def compute_quantum_cap(self, ambient_temperature, Vgs_array):
    T = Value(ambient_temperature, ureg.kelvin)
    # Material Parameters
    self.g = 2  # Spin Degenracy
    self.gv1 = 1;  # Degenracy of first valley
    self.gv2 = 1;  # Degeneracy of second valley
    self.me1_eff = Value(0.45 * scipy.constants.electron_mass, ureg.kilograms)  # Effective mass of first valley
    self.me2_eff = Value(0.45 * scipy.constants.electron_mass, ureg.kilograms)  # Effective mass of second valley
    self.vth = self.k_J * T / self.q
    self.delEC = 3 * self.vth  # Energy difference from the first valley(Set high to ignore this valley in charge calculations)
    self.epsilon_channel = self.FET.channel.relative_permittivity * free_space_permittivity_F_div_cm
    self.d = self.FET.channel.thickness.base_units()  # channel thickness

    self.epsilon_ox = self.FET.gate_oxide.relative_permittivity * free_space_permittivity_F_div_cm
    self.EOT = self.FET.gate_oxide.thickness
    # self.epsilon_ox_b =
    # self.EOTB =
    self.cox_t = (self.epsilon_ox / self.EOT).adjust_unit(ureg.coulombs / (ureg.volts * ureg.meter ** 2))
    self.cox_b = (self.epsilon_ox / self.EOT).adjust_unit(ureg.coulombs / (ureg.volts * ureg.meter ** 2))
    # Using Values From Matlab
    # self.cox_t = Value((20 * 8.854 * 1e-12) / (3e-9), ureg.coulombs / (ureg.volts * ureg.meter ** 2))
    # self.cox_b = Value((1 * 8.854 * 1e-12) / (200e-9), ureg.coulombs / (ureg.volts * ureg.meter ** 2))

    # Calculate electrostatic screening lengths
    self.lambdaT = (self.epsilon_channel * self.d / self.cox_t) ** (1 / 2)
    self.lambdaB = (self.epsilon_channel * self.d / self.cox_b) ** (1 / 2)
    self.A = (self.lambdaT ** (-2) + self.lambdaB ** (-2)) ** (1 / 2)

    # Calculate Effective density of states for each valley
    self.NDOS1 = (self.gv1 * self.me1_eff * self.k_J * T) / (pi * self.hcross ** 2)
    self.NDOS2 = (self.gv2 * self.me2_eff * self.k_J * T) / (pi * self.hcross ** 2)
    self.NDOS = self.NDOS2
    self.alpha = self.NDOS1 / self.NDOS
    self.beta = self.NDOS2 / self.NDOS
    self.Nimp = Value(3.5e11, ureg.meters ** -2)

    VDS = Value(0.0, ureg.volts)
    VS = Value(0.0, ureg.volts)
    VD = VS + VDS
    VG = Vgs_array
    xg_length = len(VG)

    array_size = 10000

    self.phi = np.zeros(array_size)
    self.f = np.zeros(array_size)
    self.fd = np.zeros(array_size)
    self.phis = np.zeros(array_size)
    self.n2d = np.zeros(len(VG))
    self.Es = np.zeros(len(VG))
    self.Eox = np.zeros(len(VG))
    self.Cg = np.zeros(len(VG))
    self.Cq = np.zeros(len(VG))

    for j in range(xg_length):
        VG_units = Value(VG[j], ureg.volts)
        VBG = VG_units
        B = ((VG_units - self.VFBT) / (self.lambdaT ** 2)) + ((VBG - self.VFBB) / (self.lambdaB ** 2))
        i = 1
        self.phi[i] = VG_units
        self.p = Value(self.phi[i], ureg.volts)

        self.f[i] = (1 + math.exp((self.p - VS) / self.vth)) ** self.alpha * (
                    1 + math.exp((self.p - VS) / self.vth) * math.exp(-self.delEC / self.vth)) ** self.beta - math.exp(
            (self.epsilon_channel * self.d / (self.q * self.NDOS)) * (B - (self.A ** 2) * self.p) + (
                        self.Nimp / self.NDOS))

        # Test1 = B - (self.A ** 2) * self.p
        # Test3 = (self.epsilon_channel * self.d / (self.q * self.NDOS)) * (B - (self.A ** 2) * self.p)
        # Test4 = (self.Nimp / self.NDOS)
        # Test5 = (self.epsilon_channel * self.d / (self.q * self.NDOS)) * (B - (self.A ** 2) * self.p) + (self.Nimp / self.NDOS)

        self.fd[i] = (1 + math.exp((self.p - VS) / self.vth)) ** self.alpha * (
                    1 + math.exp((self.p - VS) / self.vth) * math.exp(-self.delEC / self.vth)) ** self.beta * (((
                                                                                                                            self.beta * math.exp(
                                                                                                                                   self.p - VS) / self.vth))))) + (
                                 (self.A ** 2) * (self.epsilon_channel * self.d / (self.q * self.NDOS))) * math.exp(
            (self.epsilon_channel * self.d / (self.q * self.NDOS)) * (B - (self.A ** 2) * self.p) + (
                        self.Nimp / self.NDOS))

        # Test1 = (1 + math.exp((self.p - VS) / self.vth)) ** self.alpha * (1 + math.exp((self.p- VS) / self.vth) * math.exp(-self.delEC / self.vth)) ** self.beta * (((self.beta * math.exp((self.p - VS) / self.vth) * math.exp(-self.delEC / self.vth)) / (self.vth * (1 + math.exp((self.p - VS) / self.vth) * math.exp(-self.delEC / self.vth)))) + ((self.alpha * math.exp((self.p - VS) / self.vth)) / (self.vth * (1 + math.exp((self.p - VS) / self.vth)))))
        # Test2 = ((self.A ** 2) * (self.epsilon_channel * self.d / (self.q * self.NDOS))) * math.exp((self.epsilon_channel * self.d / (self.q * self.NDOS)) * (B - (self.A ** 2) * self.p) + (self.Nimp / self.NDOS))

        iter = 0
        while (abs(self.f[i]) > 1e-06):  # termination condition
            iter = iter + 1
            self.phi[i + 1] = (self.phi[i] - (self.f[i]) / (self.fd[i]))
            self.p_1 = Value(self.phi[i + 1], ureg.volts)
            self.f[i + 1] = (1 + math.exp((self.p_1 - VS) / self.vth)) ** self.alpha * (
                    1 + math.exp((self.p_1 - VS) / self.vth) * math.exp(
                -self.delEC / self.vth)) ** self.beta - math.exp(
                (self.epsilon_channel * self.d / (self.q * self.NDOS)) * (B - (self.A ** 2) * self.p_1) + (
                            self.Nimp / self.NDOS))

            self.fd[i + 1] = (1 + math.exp((self.p_1 - VS) / self.vth)) ** self.alpha * (
                    1 + math.exp((self.p_1 - VS) / self.vth) * math.exp(-self.delEC / self.vth)) ** self.beta * (
                                         ((self.beta * math.exp(
                                             (self.p_1 - VS) / self.vth) * math.exp(-self.delEC / self.vth)) / (
                                                      self.vth * (
                                                      1 + math.exp((self.p_1 - VS) / self.vth) * math.exp(
                                                  -self.delEC / self.vth)))) + ((self.alpha * math.exp(
                                     (self.p_1 - VS) / self.vth)) / (self.vth * (
                                             1 + math.exp((self.p_1 - VS) / self.vth))))) + (
                                     (self.A ** 2) * (self.epsilon_channel * self.d / (self.q * self.NDOS))) * math.exp(
                (self.epsilon_channel * self.d / (self.q * self.NDOS)) * (B - (self.A ** 2) * self.p_1) + (
                            self.Nimp / self.NDOS))
            i = i + 1

        self.phis[j] = self.phi[i]
        self.ph = Value(self.phis[j], ureg.volts)
        # Charge density in the 2D layer(m ^ -2)
        self.n2d[j] = (self.epsilon_channel * self.d / self.q) * (B - (self.A ** 2) * self.ph) + self.Nimp
        # Electic field at the surface (V/m)
        self.Es[j] = self.q * self.n2d[j] / self.epsilon_channel
        # Electric field in the oxide
        self.Eox[j] = (self.epsilon_ox / self.epsilon_channel) * ((VG[j] - self.VFBT - self.phis[j]) / self.EOT)

    self.n2d = np.trim_zeros(self.n2d, 'b')
    self.phis = np.trim_zeros(self.phis, 'b')

    # Capacitance Calculation
    Cg = np.divide(np.diff(self.q * self.n2d * 1e-4), np.diff(VG))
    CQ = np.divide(np.diff(self.q * self.n2d * 1e-4), np.diff(self.phis))

    # Plot Channel Voltage vs Vgs
    # plt.plot(VG, self.phis)
    # plt.xlabel('$V_G$$_S$ (V)', fontsize=16)
    # plt.ylabel('$V_C$$_H$ ', fontsize=16)
    # plt.show()
    #
    # #Plot Carrier Concentration vs Vgs
    # plt.plot(VG, self.n2d)
    # plt.xlabel('$V_G$$_S$ (V)', fontsize=16)
    # plt.ylabel('$n_2$$_D$ ', fontsize=16)
    # plt.show()
    #
    # # Log plot Gate Capacitance vs Vgs
    # plt.semilogy(VG[1:], Cg)
    # plt.xlabel('$V_G$$_S$ (V)', fontsize=16)
    # plt.ylabel('$C_g$ ', fontsize=16)
    # plt.show()

    # Log plot Gate Capacitance vs Vgs
    plt.semilogy(VG[1:], CQ)
    plt.xlabel('$V_G$$_S$ (V)', fontsize=16)
    plt.ylabel('$C_q$ ', fontsize=16)
    # plt.show()

